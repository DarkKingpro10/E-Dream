/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

import Controlador.ControladorReporteP;
import Controlador.ControladorVariables;
import Controlador.Validaciones;
import Recursos_Tipografias.Fuentes;
import java.awt.Color;
import java.io.File;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.activation.DataHandler;
import javax.activation.FileDataSource;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Jesus Gerardo
 */
public class FrmReporteP extends javax.swing.JPanel {

    //Colores Modo Night
    Color Rojo = new Color(220,49,72);
    Color Oscuro = new Color(14,13,21);
    //Colores Modo Light
    Color AzulOscuro = new Color(33, 47, 74);
    Color Azul = new Color(32,64,111);
    
    //Creamos objeto del controlador de la clase validaciones
    Validaciones validaciones = new Validaciones();
    
    //Creamos atributos globale
     public static String seleccion;
     public static  String seleccionI;
     
    public FrmReporteP() {
        initComponents();
        Colores();
        //Asignamos tipografia
        Fuentes tipoFuente;
         
         tipoFuente = new Fuentes();
         //Le asignamos tipografia a cada componente
        lblTitulo.setFont(tipoFuente.fuente(tipoFuente.MaxwellBold, 0, 40));
        txtaMensaje.setFont(tipoFuente.fuente(tipoFuente.MaxwellRegular, 0, 20));
        lblEncabezado.setFont(tipoFuente.fuente(tipoFuente.MaxwellRegular, 0, 30));
        lblTipoProblem.setFont(tipoFuente.fuente(tipoFuente.MaxwellRegular, 0, 20));
        lblAñadirImg.setFont(tipoFuente.fuente(tipoFuente.MaxwellRegular, 0, 20));
        lblCorreo.setFont(tipoFuente.fuente(tipoFuente.MaxwellRegular, 0, 20));
        lblNombreArchivo.setFont(tipoFuente.fuente(tipoFuente.MaxwellRegular, 0, 20));
        lblDescribir.setFont(tipoFuente.fuente(tipoFuente.MaxwellRegular, 0, 20));
        cmbTipoProblem.setFont(tipoFuente.fuente(tipoFuente.MaxwellRegular, 0, 20));
        txtCorreo.setFont(tipoFuente.fuente(tipoFuente.MaxwellRegular, 0, 20));
        txtaDescribir.setFont(tipoFuente.fuente(tipoFuente.MaxwellRegular, 0, 20));
        btnSubir.setFont(tipoFuente.fuente(tipoFuente.MaxwellRegular, 0, 20));
        lblCorreoInv.setVisible(false);
    }

    void Colores(){
        ControladorVariables variables = new ControladorVariables();
        switch(variables.getColor()){
            case 1://Oscuro
                jPanel1.setBackground(Rojo);
                pnlTitulo.setBackground(Oscuro);
                txtaMensaje.setBackground(Rojo);
                lblEncabezado.setForeground(Color.WHITE);
                lblTipoProblem.setForeground(Color.WHITE);
                lblAñadirImg.setForeground(Color.WHITE);
                lblCorreo.setForeground(Color.WHITE);
                lblDescribir.setForeground(Color.WHITE);    
                break;
            case 2://Claro
                jPanel1.setBackground(Azul);
                pnlTitulo.setBackground(AzulOscuro);
                txtaMensaje.setBackground(Azul);
                lblEncabezado.setForeground(Color.WHITE);
                lblTipoProblem.setForeground(Color.WHITE);
                lblAñadirImg.setForeground(Color.WHITE);
                lblCorreo.setForeground(Color.WHITE);
                lblDescribir.setForeground(Color.WHITE);   
                break;
            default:
                jPanel1.setBackground(Rojo);
                pnlTitulo.setBackground(Oscuro);
                lblEncabezado.setForeground(Color.WHITE);
                lblTipoProblem.setForeground(Color.WHITE);
                lblAñadirImg.setForeground(Color.WHITE);
                lblCorreo.setForeground(Color.WHITE);
                lblDescribir.setForeground(Color.WHITE);   
                break;
        }        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        pnlTitulo = new javax.swing.JPanel();
        lblTitulo = new javax.swing.JLabel();
        lblEncabezado = new javax.swing.JLabel();
        txtaMensaje = new javax.swing.JTextArea();
        lblTipoProblem = new javax.swing.JLabel();
        cmbTipoProblem = new javax.swing.JComboBox<>();
        lblAñadirImg = new javax.swing.JLabel();
        lblNombreArchivo = new javax.swing.JLabel();
        btnBorrarImg = new javax.swing.JButton();
        lblDescribir = new javax.swing.JLabel();
        txtaDescripcionProb = new javax.swing.JScrollPane();
        txtaDescribir = new javax.swing.JTextArea();
        lblImagenProblem = new javax.swing.JLabel();
        btnSubir = new org.jdesktop.swingx.JXButton();
        lblCorreo = new javax.swing.JLabel();
        txtCorreo = new javax.swing.JTextField();
        lblCorreoInv = new javax.swing.JLabel();

        jPanel1.setBackground(new java.awt.Color(220, 49, 72));
        jPanel1.setMaximumSize(new java.awt.Dimension(1090, 620));
        jPanel1.setMinimumSize(new java.awt.Dimension(1090, 620));

        pnlTitulo.setBackground(new java.awt.Color(14, 13, 21));
        pnlTitulo.setPreferredSize(new java.awt.Dimension(144, 44));

        lblTitulo.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblTitulo.setForeground(new java.awt.Color(255, 255, 255));
        lblTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitulo.setText("Ayuda y Asistencia -Reporte de Problema");

        javax.swing.GroupLayout pnlTituloLayout = new javax.swing.GroupLayout(pnlTitulo);
        pnlTitulo.setLayout(pnlTituloLayout);
        pnlTituloLayout.setHorizontalGroup(
            pnlTituloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTituloLayout.createSequentialGroup()
                .addContainerGap(342, Short.MAX_VALUE)
                .addComponent(lblTitulo)
                .addGap(273, 273, 273))
        );
        pnlTituloLayout.setVerticalGroup(
            pnlTituloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTituloLayout.createSequentialGroup()
                .addComponent(lblTitulo)
                .addGap(0, 12, Short.MAX_VALUE))
        );

        lblEncabezado.setBackground(new java.awt.Color(220, 49, 72));
        lblEncabezado.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblEncabezado.setText("Indique el problema que tuvo");

        txtaMensaje.setEditable(false);
        txtaMensaje.setBackground(new java.awt.Color(220, 49, 72));
        txtaMensaje.setColumns(20);
        txtaMensaje.setForeground(new java.awt.Color(255, 255, 255));
        txtaMensaje.setLineWrap(true);
        txtaMensaje.setRows(20);
        txtaMensaje.setTabSize(20);
        txtaMensaje.setText("¡Opss! Lamentamos los inconvenientes, por favor llene este formulario para poder solucionar su incoveniente, ser lo más sincero y descriptivo posible");
        txtaMensaje.setToolTipText("");
        txtaMensaje.setBorder(null);
        txtaMensaje.setCaretColor(new java.awt.Color(220, 49, 79));
        txtaMensaje.setPreferredSize(new java.awt.Dimension(500, 360));

        lblTipoProblem.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblTipoProblem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos_img/Error35px.png"))); // NOI18N
        lblTipoProblem.setText("Seleccione el Tipo de problema que obtuvo:");

        cmbTipoProblem.setBackground(new java.awt.Color(255, 222, 216));
        cmbTipoProblem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Funcionamiento erróneo", "Cerrado/Congelamiento inesperado", "Añadir datos - fallido", "Eliminae datos - fallido", "Modificar datos - fallido", "Visualizar datos - fallido" }));
        cmbTipoProblem.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lblAñadirImg.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblAñadirImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos_img/image35px.png"))); // NOI18N
        lblAñadirImg.setText("Añada Imagen de prueba del error (Opcional):");
        lblAñadirImg.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        lblNombreArchivo.setForeground(new java.awt.Color(255, 255, 255));
        lblNombreArchivo.setText("/NombredelArchivoxxx");

        btnBorrarImg.setBackground(new java.awt.Color(255, 222, 216));
        btnBorrarImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos_img/basurero26px.png"))); // NOI18N
        btnBorrarImg.setText("Borrar Imagen");
        btnBorrarImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarImgActionPerformed(evt);
            }
        });

        lblDescribir.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblDescribir.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDescribir.setText("Describa el problema. Por favor no omitir y ser muy descriptivo");

        txtaDescribir.setColumns(20);
        txtaDescribir.setRows(5);
        txtaDescribir.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtaDescribirKeyTyped(evt);
            }
        });
        txtaDescripcionProb.setViewportView(txtaDescribir);

        lblImagenProblem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos_img/Icono-SubirImgagen.png"))); // NOI18N
        lblImagenProblem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblImagenProblem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblImagenProblemMouseClicked(evt);
            }
        });

        btnSubir.setBackground(new java.awt.Color(164, 188, 188));
        btnSubir.setBorder(null);
        btnSubir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos_img/enviar35px.png"))); // NOI18N
        btnSubir.setText("Enviar");
        btnSubir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubirActionPerformed(evt);
            }
        });

        lblCorreo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos_img/enviar35px.png"))); // NOI18N
        lblCorreo.setText("Correo:");

        txtCorreo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCorreoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCorreoKeyTyped(evt);
            }
        });

        lblCorreoInv.setText("Correo Invalido");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, 1090, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(260, 260, 260)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtaMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addComponent(lblEncabezado))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addComponent(lblTipoProblem, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(cmbTipoProblem, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(lblCorreoInv, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblAñadirImg, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(txtCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10)
                .addComponent(lblImagenProblem, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(lblNombreArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(btnBorrarImg, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(210, 210, 210)
                .addComponent(lblDescribir, javax.swing.GroupLayout.PREFERRED_SIZE, 630, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addComponent(txtaDescripcionProb, javax.swing.GroupLayout.PREFERRED_SIZE, 810, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(470, 470, 470)
                .addComponent(btnSubir, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(pnlTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addComponent(txtaMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(lblEncabezado)
                .addGap(41, 41, 41)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTipoProblem, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(cmbTipoProblem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(30, 30, 30)
                                        .addComponent(lblCorreoInv, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(lblAñadirImg))
                                .addComponent(lblCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addComponent(txtCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(lblImagenProblem, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(lblNombreArchivo))
                    .addComponent(btnBorrarImg))
                .addGap(10, 10, 10)
                .addComponent(lblDescribir)
                .addGap(19, 19, 19)
                .addComponent(txtaDescripcionProb, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(btnSubir, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    //Metodo para ingresar error 
    void IngresarE () {
        //Creamos objeto de controlador de reporte
       ControladorReporteP obj = new ControladorReporteP();
       obj.setCorreo(txtCorreo.getText());//Obtenemos correo de persona que reporta
       obj.setError(txtaDescribir.getText());//Obtenemos descripcion del problema
       obj.setImagenP(seleccion);//Obtenemos imagen
       
        //enviando guardar a  SQLServer
            if(obj.IngresarErrorController()){
                //Para comprobar
                System.out.println("creado");
               
            }else{
                //Para comprobar
                System.out.println("error al ingresar error");
            }
    }
     
    
    //Metodo para insertar direccion de imagen
       public String insertar(){
            //Creamos componente para escoger archivos
            JFileChooser j = new JFileChooser();
            //Permitimos filtrar las extensiones de imagenes
            FileNameExtensionFilter fil = new FileNameExtensionFilter("JPG, PNG & GIF","jpg","png","gif");
            j.setFileFilter(fil);
        
             //Creamos variable que guarda la pantalla de dialogo del componenet FileChooser
            int s = j.showOpenDialog(this);
             //Condicionamo si se elije la imagen y e da aceptar se ejecuta lo siguiente
            if(s == JFileChooser.APPROVE_OPTION){
                 //O)btenemos archivo
                File archivo = j.getSelectedFile();
                //Almacenamos la direccion del archivo en "seleccion"
                seleccion = archivo.getPath();
                //Le ignamos la imagen  al componente "lblNombreArchivo"
                lblNombreArchivo.setText(seleccion);
        }
        return seleccion;
      }
       
       //Metodo para enviar correo sin imagen
        public void Enviar(){
              Properties propiedad = new Properties();
             
        //Cargamos imagen
        String asuntoCmb = String.valueOf(cmbTipoProblem.getSelectedItem());
        //Creamos las propiedades del correo
        propiedad.setProperty("mail.smtp.host", "smtp.gmail.com");
        propiedad.setProperty("mail.smtp.starttls.enable", "true");
        propiedad.setProperty("mail.smtp.port", "587");
        propiedad.setProperty("mail.smtp.auth", "true");
        
         //Creamos la variable para la sesion
        Session sesion= Session.getDefaultInstance(propiedad);
        //Definimos las variables a utilizar para el correo
        String emisor="edreams.officialcompany@gmail.com";
        String contrasena = "edreamscontra";
        String destinatario = "edreams.officialcompany@gmail.com";
        String asunto = asuntoCmb;
        String mensaje = txtaDescribir.getText();
        
        //Creamos objeto que almacene en un correo la sesion
        MimeMessage mail = new MimeMessage(sesion);
       
     
    try {
            
            //Añadimos la direccion del emisor
            mail.setFrom(new InternetAddress(emisor));
            //Añadimos la direccion del destinatario
            mail.addRecipient(Message.RecipientType.TO,new InternetAddress(destinatario));
            //Añadimos el asunto
            mail.setSubject(asunto);
            //Añadimos el mensaje
            mail.setText(mensaje);  
            //Creamo objeto que transporte todo
            Transport transporte = sesion.getTransport("smtp");
            //Añadimos los datos necesarios para el login del correo del emisor y abrimos conexion
            transporte.connect(emisor,contrasena);
            //Añadimos el mensaje o correo al transporte
            transporte.sendMessage(mail, mail.getRecipients(Message.RecipientType.TO));
            //Cerramos la conexión
            transporte.close();
            //Se envio
                FrmNoti2 notificacion = new FrmNoti2();
               
                notificacion.lblTituloNoti2.setText("¡Reporte Enviado!");
                notificacion.TANoti2.setText("El reporte de problema"
                        +"\n"
                        + " se ha enviado");
                 notificacion.setVisible(true);
        } catch (AddressException ex) {
            //Si surge error cargamos form de eror
          FrmNotiError error = new FrmNotiError();
            error.lblTituloError.setText("Error De Envio");
            error.TAnotiError.setText("Ocurrio un error al enviar "
                     +"\n"
                    + "su reporte, "
                     +"\n"
                    + "verifique su acceso a internet "
                     +"\n"
                    + "y sus credenciales"
                     +"\n"
                    + " estén activos");
            error.setVisible(true);
            Logger.getLogger(FrmReporteP.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MessagingException ex) {
          Logger.getLogger(FrmReporteP.class.getName()).log(Level.SEVERE, null, ex);
          //Mostramos error
            FrmNotiError error = new FrmNotiError();
            error.setVisible(true);
            error.lblTituloError.setText("Error De Envio");
            error.TAnotiError.setText("Ocurrio un error al enviar "
                     +"\n"
                    + "su reporte, "
                     +"\n"
                    + "verifique su acceso a internet "
                     +"\n"
                    + "o que los servicios del servidor"
                     +"\n"
                    + " estén activos");
           
       }
    }
       
        //Metodo para enviar correo con imagen
        
         public void EnviarConImagen(){
        Properties propiedad = new Properties();  
      
        //Cargamos imagen
        String asuntoCmb = String.valueOf(cmbTipoProblem.getSelectedItem());
        //Creamos las propiedades del correo
        propiedad.setProperty("mail.smtp.host", "smtp.gmail.com");
        propiedad.setProperty("mail.smtp.starttls.enable", "true");
        propiedad.setProperty("mail.smtp.port", "587");
        propiedad.setProperty("mail.smtp.auth", "true");
        
         //Creamos la variable para la sesion
        Session sesion= Session.getDefaultInstance(propiedad);
        //Definimos las variables a utilizar para el correo
        String emisor="edreams.officialcompany@gmail.com";
        String contrasena = "edreamscontra" ;
        String destinatario = "edreams.officialcompany@gmail.com";
        String asunto = asuntoCmb;
        String mensaje = txtaDescribir.getText();
        
        //Creamos objeto que almacene en un correo la sesion
        MimeMessage mail = new MimeMessage(sesion);
       
     
    try {
            
            //Añadimos la direccion del emisor
            mail.setFrom(new InternetAddress(emisor));
            //Añadimos la direccion del destinatario
            mail.addRecipient(Message.RecipientType.TO,new InternetAddress(destinatario));
            //Añadimos el asunto
            mail.setSubject(asunto);
            //Añadimos el texto
             BodyPart texto = new MimeBodyPart();
             texto.setContent(mensaje,"text/html");
             
            //Añadimos archivo adjunto
            BodyPart adjunto = new MimeBodyPart();
            adjunto.setDataHandler(new DataHandler(new FileDataSource(seleccion)));
            adjunto.setFileName("Imagen.jpg");
            System.out.println(seleccion);
             //Unimos texto y archivo adjunto
             MimeMultipart multiParte = new MimeMultipart();
             multiParte.addBodyPart(texto);
             multiParte.addBodyPart(adjunto);
             mail.setContent(multiParte);
             
            //Añadimos el mensaje
           // mail.setText(mensaje);
            //Creamo objeto que transporte todo
            Transport transporte = sesion.getTransport("smtp");
            //Añadimos los datos necesarios para el login del correo del emisor y abrimos conexion
            transporte.connect(emisor,contrasena);
            //Añadimos el mensaje o correo al transporte
            transporte.sendMessage(mail, mail.getRecipients(Message.RecipientType.TO));
            //Cerramos la conexión
            transporte.close();
            //Se envio
            FrmNoti2 notificacion = new FrmNoti2();
           
            notificacion.lblTituloNoti2.setText("¡Reporte Enviado!");
            notificacion.TANoti2.setText("El reporte de problema"
                        +"\n"
                        + " se ha enviado");
             notificacion.setVisible(true);
        } catch (AddressException ex) {
            //Enviamos error
            FrmNotiError error = new FrmNotiError();
            error.setVisible(true);
            error.lblTituloError.setText("Error Ee Envio");
            error.TAnotiError.setText("Ocurrio un error al enviar "
                     +"\n"
                    + "su reporte, "
                     +"\n"
                    + "verifique su acceso a internet "
                     +"\n"
                    + "o que los servicios del servidor"
                     +"\n"
                    + " estén activos");
            Logger.getLogger(FrmReporteP.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MessagingException ex) {
          Logger.getLogger(FrmReporteP.class.getName()).log(Level.SEVERE, null, ex);
           //Enviamos error
            FrmNotiError error = new FrmNotiError();
            error.setVisible(true);
            error.lblTituloError.setText("Error De Envio");
            error.TAnotiError.setText("Ocurrio un error al enviar "
                     +"\n"
                    + "su reporte, "
                     +"\n"
                    + "verifique su acceso a internet "
                     +"\n"
                    + "y sus redenciales"
                     +"\n"
                    + " estén activos");
           }
        }
       
    private void btnSubirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubirActionPerformed
         
        //Creamos objeto de formulario de notificacion de campos vacio
         FrmNoti1 campo = new FrmNoti1();
         
         //Vlidamos que los campo no esten in llenar
        if (txtCorreo.getText().isEmpty()||txtaDescribir.getText().isEmpty()) {
            campo.setVisible(true);
            campo.TAMensajeError.setText("Existen campos sin"
                    +"\n"
                    + " datos asignados");
            campo.lblTituloNoti1.setText("¡Campos vacíos!");
        }else{

       //Comparamos el texto obtenido del label, si tien eso escrito se ejcuta el metodo enviar
        if (lblNombreArchivo.getText().equals("/NombredelArchivoxxx")) {
            Enviar();
            //Ejecutamos metodo para inhgresar error en base de datos
            IngresarE();
            //i no se ejecuta el metodo de enviar con imagen
        }else{
            EnviarConImagen();
            //Ejecutamos metodo para ingresar error en base de datos
            IngresarE();
        }
       }
    }//GEN-LAST:event_btnSubirActionPerformed

    private void lblImagenProblemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblImagenProblemMouseClicked
       insertar();
    }//GEN-LAST:event_lblImagenProblemMouseClicked

    private void btnBorrarImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarImgActionPerformed
        //Establecemos de nuevo el nombre del archivo
        lblNombreArchivo.setText("/NombredelArchivoxxx");
    }//GEN-LAST:event_btnBorrarImgActionPerformed

    private void txtCorreoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCorreoKeyTyped
      
    }//GEN-LAST:event_txtCorreoKeyTyped

    private void txtaDescribirKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtaDescribirKeyTyped
       
    }//GEN-LAST:event_txtaDescribirKeyTyped

    private void txtCorreoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCorreoKeyReleased
        //Invocamos a un metodo en el controlador donde se evalue si el formato del correo es el correcto
        boolean confirm = ControladorReporteP.ConfirmarCorreo(txtCorreo.getText());
        //Verificamos si el resultado es null o false
        if (confirm==true) {
            lblCorreoInv.setVisible(false);
        }else{
            lblCorreoInv.setVisible(true);
        }
    }//GEN-LAST:event_txtCorreoKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBorrarImg;
    private org.jdesktop.swingx.JXButton btnSubir;
    private javax.swing.JComboBox<String> cmbTipoProblem;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblAñadirImg;
    private javax.swing.JLabel lblCorreo;
    private javax.swing.JLabel lblCorreoInv;
    private javax.swing.JLabel lblDescribir;
    private javax.swing.JLabel lblEncabezado;
    private javax.swing.JLabel lblImagenProblem;
    private javax.swing.JLabel lblNombreArchivo;
    private javax.swing.JLabel lblTipoProblem;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JPanel pnlTitulo;
    private javax.swing.JTextField txtCorreo;
    private javax.swing.JTextArea txtaDescribir;
    private javax.swing.JScrollPane txtaDescripcionProb;
    private javax.swing.JTextArea txtaMensaje;
    // End of variables declaration//GEN-END:variables
}
